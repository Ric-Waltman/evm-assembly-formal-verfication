// Import
#include "../../lib/huffmate/src/data-structures/Hashmap.huff"

// Interfaces
#define function mintHorse() nonpayable returns()
#define function feedHorse(uint256 horseId) nonpayable returns()
#define function isHappyHorse(uint256 horseId) view returns (bool)
#define function horseIdToFedTimeStamp(uint256 horseId) view returns (uint256 lastFedTimeStamp)
#define function HORSE_HAPPY_IF_FED_WITHIN() view returns(uint256)

// storage slot for the mapping
#define constant HORSE_FED_TIMESTAMP_SLOT = FREE_STORAGE_POINTER()

// 1 word value for 1 day
#define constant HORSE_HAPPY_IF_FED_WITHIN_CONST = 0x15180

#define macro FEED_HORSE() = takes(0) returns(0) {
    timestamp                       // [timestamp]
    0x04                            // [0x04, timestamp]
    calldataload                    // [data[0x04], timestamp]
    
    // sstore the timestamp with the horseId key
    [HORSE_FED_TIMESTAMP_SLOT]      // [HORSE_FED_TIMESTAMP_SLOT, data[0x04], timestamp]
    
    // Pass in 0x00 as the free memory pointer, which we don't worry about for now in this course
    STORE_ELEMENT_FROM_KEYS(0x00)   // []
}

#define macro IS_HAPPY_HORSE() = takes(0) returns(0) {
    0x04                                // [0x04]
    calldataload                        // [horseId]
    [HORSE_FED_TIMESTAMP_SLOT]          // [HORSE_FED_TIMESTAMP_SLOT, horseId]
    LOAD_ELEMENT_FROM_KEYS(0x00)        // [horseFedTimestamp]
    timestamp                           // [timestamp, horseFedTimestamp]
    // dup2 x2 because we need to do both gt and eq op codes
    dup2                                // [horseFedTimestamp, timestamp, horseFedTimestamp]
    dup2                                // [timestamp, horseFedTimestamp, timestamp, horseFedTimestamp]
    SUB                                 // [timestamp - horseFedTimestamp, timestamp, horseFedTimestamp]
    [HORSE_HAPPY_IF_FED_WITHIN_CONST]   // [HORSE_HAPPY_IF_FED_WITHIN_CONST, timestamp - horseFedTimestamp, timestamp, horseFedTimestamp]
    gt                                  // [horseFedWithin1Day?, timestamp, horseFedTimestamp]
    start_return_true                   // [start_return_true, horseFedWithin1Day?, timestamp, horseFedTimestamp]
    jumpi                               // [timestamp, horseFedTimestamp]
    eq                                  // [(timestamp == horseFedTimestamp)]
    start_return                        // [start_return, (timestamp == horseFedTimestamp)]
    jump                                // [(timestamp == horseFedTimestamp)]

    start_return_true:
        0x01                            // [0x01, timestamp, horseFedTimestamp]
    
    start_return:
        0x00                            // [0x00, 0x01, (timestamp == horseFedTimestamp)]
        mstore                          // [(timestamp == horseFedTimestamp)]
        0x20 0x00 return                // []
}

#define macro GET_HORSE_FED_TIMESTAMP() = takes(0) returns (0) {
    0x04                        // [0x04]
    calldataload                // [data[0x04]]
    [HORSE_FED_TIMESTAMP_SLOT]  // [HORSE_FED_TIMESTAMP_SLOT, data[0x04]]
    
    // Loads an element to stack using 2 keys from stack
    LOAD_ELEMENT_FROM_KEYS(0x00)// [horseFedTimestamp]

    // Return the stack word
    0x00                        // [0x00, horseFedTimestamp]
    mstore                      // []
    
    // Takes 32-bytes from 0th position and return it
    0x20 0x00 return            // [0x20 0x00 return]
}

#define macro HORSE_HAPPY_IF_FED_WITHIN() = takes(0) returns(0) {
    [HORSE_HAPPY_IF_FED_WITHIN_CONST]// [HORSE_HAPPY_IF_FED_WITHIN_CONST]
    0x00                             // [0x00, HORSE_HAPPY_IF_FED_WITHIN_CONST]
    mstore                           // []
    0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 CALLDATALOAD 0xE0 SHR      // [fn_selector]

    // Function dispatch
    dup1 __FUNC_SIG(mintHorse) eq mintHorse jumpi
    dup1 __FUNC_SIG(feedHorse) eq feedHorse jumpi
    dup1 __FUNC_SIG(isHappyHorse) eq isHappyHorse jumpi
    dup1 __FUNC_SIG(horseIdToFedTimeStamp) eq horseIdToFedTimeStamp jumpi
    __FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN) eq horseHappyIfFedWithin jumpi

    mintHorse:
        MINT_HORSE()
    feedHorse:
        FEED_HORSE()
    isHappyHorse:
        IS_HAPPY_HORSE()
    horseIdToFedTimeStamp:
        GET_HORSE_FED_TIMESTAMP()
    horseHappyIfFedWithin:
        HORSE_HAPPY_IF_FED_WITHIN()
}